name: CI

on:
  push:
    branches:
      - "**"
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements-dev.txt

      - name: Run tests
        run: pytest

  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18.18"

      - name: Install dependencies
        run: npm install
        working-directory: apps/frontend

      - name: Build frontend
        run: npm run build
        working-directory: apps/frontend

  build:
    needs:
      - test
      - frontend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - name: backend
            dockerfile: Dockerfile
            image: ghcr.io/osadchii/lang-agent-backend
          - name: frontend
            dockerfile: Dockerfile.frontend
            image: ghcr.io/osadchii/lang-agent-frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: osadchii
          password: ${{ secrets.REGISTRY_SECRET }}

      - name: Build and push ${{ matrix.name }} image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ matrix.image }}:latest
            ${{ matrix.image }}:${{ github.sha }}
          cache-from: type=gha,scope=${{ matrix.name }}
          cache-to: type=gha,scope=${{ matrix.name }},mode=max

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.RPI_HOST }}
          username: ${{ secrets.RPI_USER }}
          key: ${{ secrets.RPI_SSH_KEY }}
          port: ${{ secrets.RPI_PORT }}
          script: mkdir -p /opt/lang-agent

      - name: Upload deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.RPI_HOST }}
          username: ${{ secrets.RPI_USER }}
          key: ${{ secrets.RPI_SSH_KEY }}
          port: ${{ secrets.RPI_PORT }}
          source: docker-compose.yml,.env.example
          target: /opt/lang-agent

      - name: Pull and restart services
        id: deploy_step
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.RPI_HOST }}
          username: ${{ secrets.RPI_USER }}
          key: ${{ secrets.RPI_SSH_KEY }}
          port: ${{ secrets.RPI_PORT }}
          script: |
            set -e
            cd /opt/lang-agent
            if [ ! -f .env ]; then
              cp .env.example .env
            fi
            echo "${{ secrets.REGISTRY_SECRET }}" | docker login ghcr.io -u osadchii --password-stdin
            docker compose pull
            docker compose up -d --remove-orphans

      - name: Send Telegram notification on success
        if: success()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_API_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="‚úÖ *–î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω*%0A%0AüöÄ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: \`${{ github.repository }}\`%0Aüì¶ –ö–æ–º–º–∏—Ç: [\`${GITHUB_SHA:0:7}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})%0Aüë§ –ê–≤—Ç–æ—Ä: ${{ github.actor }}%0Aüåø –í–µ—Ç–∫–∞: \`${{ github.ref_name }}\`%0A%0Aüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"

      - name: Send Telegram notification on failure
        if: failure()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_API_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="Markdown" \
            -d text="‚ùå *–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è*%0A%0AüöÄ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: \`${{ github.repository }}\`%0Aüì¶ –ö–æ–º–º–∏—Ç: [\`${GITHUB_SHA:0:7}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})%0Aüë§ –ê–≤—Ç–æ—Ä: ${{ github.actor }}%0Aüåø –í–µ—Ç–∫–∞: \`${{ github.ref_name }}\`%0A%0A‚ö†Ô∏è –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.%0A%0Aüîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
